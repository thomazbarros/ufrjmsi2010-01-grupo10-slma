model EditoraABC

class Autor
operations
	calculaDireitoAutoral(nomeLivro : String)
end

class Livro
attributes
	titulo : String
	prazoDisponibilidade : String
	custo : Real
end

class Editor
end

class Grafica
end

class Deposito
attributes
	quantidadeEstoque : Integer
operations
	atualizaQuantidadeEstoque(quantidadeRecebida : Integer)
end

class Livreiro
end

class Pedido
attributes
	formaEnvio : String
end

class SetorComercial
operations
	preparaCheque()
end

class FaturaEncomenda
attributes
	forma : String
	prazoPagamento : String
end

class FaturaEntrega
attributes
	dataVencimento : String
end

class Transportadora
operations
	calculaFrete(cidadeOrigem : String)
end

--Classe de associacao
class LivroPronto
attributes
	quantidade : Integer
end

class Entrega
attributes
	custo : Real
	dataEnvio : String
end

class Pagamento
end

class Devolucao
attributes
	valor : Real
	motivo : String
end

class Contrato
attributes
	taxa : Real
	prazoValidade : String
operations
	especificaDivisaoDireitosAutorais()
end

class Encomenda
end

association autorContrato between
	Autor[1] role assina
	Contrato[1] role eAssinado
end

association autorEditor between
	Autor[1..*] role trabalha
	Editor[1..*] role trabalha
end

association editorGrafica between
	Editor[1..*] role solicitaCotacao
	Grafica[1] role entregaCotacao
end

association graficaLivro between
	Grafica[1..*] role imprime
	Livro[1] role eImpresso
end

association graficaDeposito between
	Grafica[1..*] role enviaLivro
	Deposito[1..*] role recebeLivro
end

association depositoEntrega between
	Deposito[1..*] role prepara
	Entrega[1] role ePreparada
end

association entregaTransportadora between
	Entrega[1] role eFeita
	Transportadora[1..*] role realiza
end

association depositoPedido between
	Deposito[1..*] role recebe
	Pedido[1] role eEnviado
end

association setorComercialEncomenda between
	SetorComercial[1..*] role recebeInformacao
	Encomenda[1] role eInformada
end

association setorComercialDevolucaoInformacao between
	SetorComercial[1..*] role recebeInformacao
	Devolucao[1] role eInformado
end

association depositoLivreiro between
	Deposito[1] role confereRemessa
	Livreiro[1..*] role remeteLivros
end

association pedidoLivreiro between
	Pedido[1] role eFeito
	Livreiro[1] role preenche
end

association setorComercialLivreiro between
	SetorComercial[1] role respondeSolicitacao
	Livreiro[1] role solicitaDevolucao
end

association setorComercialDevolucaoRealizacao between
	SetorComercial[1] role preparaCheque
	Devolucao[1] role eEfetuada
end

association livreiroDevolucao between
	Livreiro[1] role efetua
	Devolucao[1] role eEfetuada
end

association livreiroLivroCompra between
	Livreiro[1..*] role compra
	Livro[*] role eComprado
end

association livreiroLivroDados between
	Livreiro[1] role consultaDados
	Livro[1] role informaDados
end

association livroAutor between
	Livro[*] role eEscrito
	Autor[1..*] role escreve
end

association faturaSetorComercial between
	FaturaEncomenda[1] role eFeita
	SetorComercial[1..*] role faz
end

association pedidoLivroPronto between
	Pedido[1] role contem
	LivroPronto[1] role estaContido 
end

association livroProntoLivro between
	LivroPronto[1] role eGerado
	Livro[1] role gera
end

association entregaFatura between
	Entrega[1] role gera
	FaturaEntrega[1] role eGerada
end

association livreiroPagamento between
	Livreiro[1] role realiza
	Pagamento[1] role eRealizado
end

association pagamentoFatura between
	Pagamento[1] role eEfetuado
	FaturaEncomenda[1] role recebe
end

association encomendaFaturaEncomenda between
	Encomenda[1] role possui
	FaturaEncomenda[1] role eAssociada
end

association depositoEncomenda between
	Deposito[1..*] role envia
	Encomenda[1] role eEnviada
end



--constraints

--context Deposito::atualizaEstoque(quantidade : Integer)
--  post : quantidadeEstoque = quantidadeEstoque@pre + quantidade
  
 

--Tuple {pedido: PedidoDeCompra, status : pedido.status}
--Tuple {fatura: Fatura, dataPagamento: fatura.prazo, valor : fatura.valor}
--Tuple {dataPagamento: pagamento.data, valor: pagamento.valor}
--Tuple {devolucao: Devolucao, data: devolucao.data}
--context Deposito::valorTotalVendas()
--post: recebeInformacao.recebe.valor.sum()
--Tuple {livro : Livro, quantidade : livro.eimpresso.envialivro.quantidadeEstoque}
