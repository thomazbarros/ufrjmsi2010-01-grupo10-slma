model EditoraABC

class Autor
operations
	calculaDireitoAutoral(nomeLivro : String)
	geraRelatorioTotalLivrosVendidos() : Integer
	geraRelatorioTotalLivrosDevolvidos() : Integer
	geraRelatorioTotalLivrosEstoque() : Integer
end

class Livro
attributes
	titulo : String
	prazoDisponibilidade : String
	custo : Real
end

class Editor
end

class Grafica
end

class Deposito
attributes
	quantidadeEstoque : Integer
operations
	atualizaQuantidadeEstoque(quantidadeRecebida : Integer)
end

class Livreiro
attributes
	id : Integer
operations
	geraRelatorioPedidos() : Set(Pedido)
	geraRelatorioFaturas() : Set(FaturaEncomenda)
	geraRelatorioPagamentos() : Set(Pagamento)
	geraRelatorioDevolucoes() : Set(Devolucao)
end

class Pedido
attributes
	quantidade : Integer
	valor : Real
	estado : String
	formaEnvio : String
	id : Integer
end

class SetorComercial
operations
	preparaCheque()
	geraRelatorioTotalVendas() : Integer
	geraRelatorioTotalDinheiroRecebido() : Real
	geraRelatorioTotalLivrosEstoque() : Integer
end

class FaturaEncomenda
attributes
	id : Integer
	valor : Real
	forma : String
	prazoPagamento : String
end

class FaturaEntrega
attributes
	dataVencimento : Date
end

class Transportadora
operations
	calculaFrete(cidadeLivreiro : String) : Real
end

--Classe de associacao
class LivroPronto
attributes
	quantidade : Integer
end

class Entrega
attributes
	custo : Real
	dataEnvio : Date
	dataRecebimento : Date
	quantidade : Integer
operations
	calculaCusto(cidadeLivreiro : String) : Real
end

class Pagamento
end

class Devolucao
attributes
	valor : Real
	dataDevolucao : Date
	motivo : String
	quantidade : Integer
end

class Contrato
attributes
	taxa : Real
	prazoValidade : String
operations
	especificaDivisaoDireitosAutorais()
end

class Encomenda
attributes
	custo : Real
end

class Event
attributes
	time : DateTime
operations
	effect()
end

class E1 < Event
attributes
	answer : Set(Tuple(idpedido : Integer, idcliente : Integer, valortotal : Real))
operations
	effect()
end

class E2 < Event
attributes
	answer : Set(Tuple(idfatura : Integer, idcliente : Integer, valorpago : Real))
operations
	effect()
end

class E3 < Event
operations
	effect(quantidade : Integer, dataRecebimento : Date)
end

class E4 < Event
operations
	effect()
end

class E6 < Event
operations
	effect()
end
	
association assina between
	Autor[1] role autor
	Contrato[1] role contrato
end

association trabalha between
	Autor[1..*] role autor
	Editor[1..*] role editor
end

association solicitaCotacao between
	Editor[1..*] role editor
	Grafica[1] role grafica
end

association imprime between
	Grafica[1..*] role grafica
	Livro[1] role livro
end

association enviaLivro between
	Grafica[1] role grafica
	Deposito[1..*] role deposito
end

association prepara between
	Deposito[1..*] role deposito
	Entrega[*] role entrega
end

association realiza between
	Transportadora[1..*] role transportadora
	Entrega[*] role entrega
end

association recebe between
	Deposito[1..*] role deposito
	Pedido[*] role pedido
end

association informaEncomenda between
	Encomenda[*] role encomenda
	SetorComercial[1..*] role setorComercial
end

association informaDevolucao between
	Devolucao[*] role devolucaoInforma
	SetorComercial[1..*] role setorComercialDevolve
end

association remeteLivros between
	Devolucao[1] role devolucao
	Deposito[1] role deposito
end

association preenche between
	Livreiro[1..*] role livreiro
	Pedido[*] role pedido
end

association solicitaDevolucao between
	Livreiro[1] role livreiro
	SetorComercial[1] role setorComercial
end

association preparaCheque between
	SetorComercial[1..*] role setorComercialPaga
	Devolucao[*] role devolucaoPaga
end

association eEfetuada between
	Devolucao[*] role devolucao
	Livreiro[1..*] role livreiro
end

association compra between
	Livreiro[1..*] role livreiroCompra
	Livro[*] role livroCompra
end

association consultaDados between
	Livreiro[1..*] role livreiroConsulta
	Livro[*] role livroConsulta
end

association escrever between
	Autor[1..*] role autor
	Livro[*] role livro
end

association faz between
	SetorComercial[1..*] role setorComercial
	FaturaEncomenda[*] role faturaEncomenda
end

association contem between
	Pedido[1..*] role pedido 
	LivroPronto[*] role livroPronto
end

association gerado between
	LivroPronto[1] role livroPronto
	Livro[1] role livro
end

association gera between
	Entrega[1] role entrega
	FaturaEntrega[1] role faturaEntrega
end

association realizado between
	Pagamento[*] role pagamento
	Livreiro[1..*] role livreiro
end

association efetuado between
	Pagamento[1] role pagamento
	FaturaEncomenda[1] role faturaEncomenda
end

association possui between
	Encomenda[1] role encomenda
	FaturaEncomenda[1] role faturaEncomenda
end

association envia between
	Deposito[1..*] role deposito
	Encomenda[*] role encomenda
end

association recebeEntrega between
	Livreiro[1..*] role livreiro
	Entrega[*] role entrega
end

association relacaoE1Pedido between
	Pedido[0..*] role pedido
	E1[1] role e1
end

association relacaoE2Pagamento between
	Pagamento[0..*] role pagamento
	E2[1] role e2
end

association relacaoE3Grafica between
	Grafica[1] role grafica
	E3[1] role e3
end

association relacaoE4Livreiro between
	Livreiro[1] role livreiro
	E4[1] role e4
end

association relacaoE6Livreiro between
	Livreiro[1] role livreiro
	E6[1] role e6
end

constraints

context Deposito::atualizaQuantidadeEstoque(quantidadeRecebida : Integer)
	post : quantidadeEstoque = quantidadeEstoque@pre + quantidadeRecebida

context Livreiro::geraRelatorioPedidos() : Set(Pedido)
	post : result = pedido
  
context Livreiro::geraRelatorioFaturas() : Set(FaturaEncomenda)
	post : result = pagamento.faturaEncomenda

context Livreiro::geraRelatorioPagamentos() : Set(Pagamento)
	post : result = pagamento

context Livreiro::geraRelatorioDevolucoes() : Set(Devolucao)
	post : result = devolucao

context SetorComercial::geraRelatorioTotalVendas() : Integer
	post : result = encomenda.deposito.pedido.livroPronto.quantidade->sum()
	
context SetorComercial::geraRelatorioTotalDinheiroRecebido() : Real
	post : result = encomenda.deposito.pedido.livroPronto.livro.custo->sum()
	
context SetorComercial::geraRelatorioTotalLivrosEstoque() : Integer
	post : result = encomenda.deposito.quantidadeEstoque->sum()
		
context Autor::geraRelatorioTotalLivrosVendidos() : Integer
	post : result = livro.livroPronto.pedido.deposito.entrega.quantidade->sum()
	
context Autor::geraRelatorioTotalLivrosDevolvidos() : Integer
	post : result = livro.livroPronto.pedido.deposito.devolucao.quantidade->sum()

context Autor::geraRelatorioTotalLivrosEstoque() : Integer
	post : result = livro.livroPronto.pedido.deposito.quantidadeEstoque->sum()

context Pedido
	inv restricaoQuantidadePedido : quantidade > 10

context Pedido
	inv restricaoValorMinimo : valor >= 100

context Devolucao
	inv restricaoPedidoDevolucaoDanificado : motivo = 'Exemplares danificados' implies (livreiro.entrega.dataEnvio)->asSequence()->first() + 30 <= self.dataDevolucao

context Livreiro
	inv restricaoValorPedido : pedido.valor->sum() < 10000

--context E1::effect()
	--post : answer = (pedido.collect(Tuple(idpedido=self.id,idcliente=livreiro.id,valortotal=self.valor)))->asSet()

--context E2::effect()
	--post : answer = (pagamento.collect(Tuple(idfatura=faturaEncomenda.id,idcliente=livreiro.id,valorpago=faturaEncomenda.valor)))->asSet()

context E3::effect(quantidade : Integer, dataRecebimento : Date)
	post : (grafica.deposito.entrega.quantidade)->asSequence()->first() = quantidade and (grafica.deposito.entrega.dataRecebimento)->asSequence()->first() = dataRecebimento

context E4::effect()
	post : (livreiro.pedido.estado)->asSequence()->first() = 'Enviado pelo cliente'

context E6::effect()
	post : (livreiro.pagamento.faturaEncomenda.pedido.estado)->asSequence()->first() = 'Pago'

--set(Tuple {pedido: PedidoDeCompra, status : pedido.status}) = faksf.safjksf.set(k | Tuple(pedido = , status = )
--Tuple {fatura: Fatura, dataPagamento: fatura.prazo, valor : fatura.valor}
--Tuple {dataPagamento: pagamento.data, valor: pagamento.valor}
--Tuple {devolucao: Devolucao, data: devolucao.data}
--Tuple {livro : Livro, quantidade : livro.eimpresso.envialivro.quantidadeEstoque}